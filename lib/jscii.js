// Generated by CoffeeScript 1.4.0
(function() {
  var Jscii, getChar, normalizeRgba;

  navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

  Jscii = (function() {

    function Jscii(container, ready) {
      var h, self, w;
      this.container = container;
      this.ready = ready;
      this.video = document.querySelector('video');
      self = this;
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.canvas.width = this.width = w = 100;
      this.canvas.height = this.height = h = 300 / 4;
      navigator.getMedia({
        video: true,
        audio: true
      }, function(localMediaStream) {
        var url;
        url = window.URL || window.webkitURL;
        self.video.src = url.createObjectURL(localMediaStream);
        self.stream = localMediaStream;
        setInterval(function() {
          return self.startAscii();
        }, 10);
        return self.video.onloadedmetadata = function(e) {
          return console.log(e);
        };
      }, function(err) {
        return console.log("The following error occured: " + err);
      });
    }

    Jscii.prototype.startAscii = function() {
      if (this.stream) {
        this.ctx.drawImage(this.video, 0, 0, this.width, this.height);
        this.data = this.ctx.getImageData(0, 0, this.width, this.height).data;
        return this.container.innerHTML = this.toString();
      }
    };

    Jscii.prototype.load = function(img) {
      var imgObj,
        _this = this;
      if (typeof img === 'string') {
        if ((imgObj = document.getElementById(img)) && imgObj.tagName === 'IMG') {
          img = imgObj;
        }
      }
      return (this.img = img).addEventListener('load', function() {
        return _this._imageLoaded();
      });
    };

    Jscii.prototype._imageLoaded = function() {
      var h, w;
      this.canvas.width = this.width = w = 100;
      this.canvas.height = this.height = h = 100 * this.img.height / this.img.width;
      this.ctx.drawImage(this.img, 0, 0, w, h);
      this.data = this.ctx.getImageData(0, 0, w, h).data;
      return this.container.innerHTML = this.toString();
    };

    Jscii.prototype.toString = function() {
      var d, i, len, str, width, _fn, _i;
      d = this.data;
      width = this.width;
      len = width * this.height - 1;
      str = '';
      _fn = function(i) {
        var hex, hsva, val;
        if (i % width === 0) {
          str += '<br>';
        }
        hex = normalizeRgba(d[i = i * 4], d[i + 1], d[i + 2]).toHex();
        hsva = color.hsva(hex).toArray();
        val = hsva[2];
        return str += getChar(val);
      };
      for (i = _i = 0; 0 <= len ? _i <= len : _i >= len; i = 0 <= len ? ++_i : --_i) {
        _fn(i);
      }
      return str;
    };

    return Jscii;

  })();

  getChar = function(val) {
    var d;
    d = 1 / 13;
    if ((0 <= val && val < d)) {
      return '@';
    } else if ((d <= val && val < d * 2)) {
      return '$';
    } else if ((d * 2 <= val && val < d * 3)) {
      return '#';
    } else if ((d * 3 <= val && val < d * 4)) {
      return '*';
    } else if ((d * 4 <= val && val < d * 5)) {
      return '!';
    } else if ((d * 5 <= val && val < d * 6)) {
      return '=';
    } else if ((d * 6 <= val && val < d * 7)) {
      return ';';
    } else if ((d * 7 <= val && val < d * 8)) {
      return ':';
    } else if ((d * 8 <= val && val < d * 9)) {
      return '~';
    } else if ((d * 9 <= val && val < d * 10)) {
      return '-';
    } else if ((d * 10 <= val && val < d * 11)) {
      return ',';
    } else if ((d * 11 <= val && val < d * 12)) {
      return '.';
    } else {
      return '&nbsp;';
    }
  };

  normalizeRgba = function(rgb) {
    if (arguments.length > 1) {
      rgb = [arguments[0], arguments[1], arguments[2]];
    }
    return color.rgba({
      r: rgb[0] / 255,
      g: rgb[1] / 255,
      b: rgb[2] / 255
    });
  };

  window.Jscii = Jscii;

}).call(this);
